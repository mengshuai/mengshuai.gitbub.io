[{"title":"JavaScript深拷贝浅拷贝问题","date":"2017-04-01T02:15:07.000Z","path":"2017/04/01/shallow-deep-copy/","text":"JavaScript深拷贝浅拷贝问题浅拷贝和深拷贝只针对Object、Array。 浅拷贝：浅拷贝是拷贝引用，拷贝后的引用都是指向同一个对象的实例，彼此之间的操作会互相影响（在内存中指向同一地址）深拷贝：在内存中重新分配地址，将原对象的各个属性逐个复制出去，而且将原对象各个属性所包含的对象也依次采用深复制的方法递归复制到新对象上。（拷贝后彼此之间互不影响） 浅拷贝拷贝原对象的引用最简单的浅拷贝12345var obj = &#123; a:1, arr: [2,3] &#125;;var obj1 = obj;console.log(obj === obj1); // trueobj.a = 5;console.log(obj1.a) // 5 源对象拷贝实例，其属性对象拷贝引用。这种情况，外层源对象是拷贝实例，如果其属性元素为复杂杂数据类型时，内层元素拷贝引用。对源对象直接操作，不影响两外一个对象，但是对其属性操作时候，会改变两外一个对象的属性的只。常用方法为：Array.prototype.slice(), Array.prototype.concat(), jQury的$.extend({},obj)，例：Underscore —— _.clone()就是 12345var a = [&#123;c:1&#125;, &#123;d:2&#125;];var b = a.slice();console.log(a === b); // 输出false，说明外层数组拷贝的是实例a[0].c = 3;console.log(b[0].c); // 输出 3，说明其元素拷贝的是引用 深拷贝深拷贝后，两个对象，包括其内部的元素互不干扰。常见方法有JSON.parse(),JSON.stringify()，jQury的$.extend(true,{},obj)，lodash的.cloneDeep和.clone(value, true)。例：123456789101112131415161718192021var obj = &#123; a:1, arr: [2,3] &#125;;//方法一:借助 JSON 全局对象（兼容IE8+）var obj1 = JSON.parse(JSON.stringify(obj));//验证console.log(obj === obj1) //输出falseobj.a = 5;console.log(obj1.a) //输出1//方法二:利用递归var cloneObj = function(obj)&#123; var str, newobj = obj.constructor === Array ? [] : &#123;&#125;; for(var i in obj)&#123; newobj[i] = typeof obj[i] === &apos;object&apos; ? cloneObj(obj[i]) : obj[i]; &#125; return newobj;&#125;;var obj2 = cloneObj(obj);//方法三：jquery的$.extend(true,&#123;&#125;,obj)（但jQuery不能正确处理Int16Array的深复制！！！）var obj3 = $.extend(true, &#123;&#125;, obj);//方法四：lodash的_.cloneDeep和_.clone(value, true)var obj4 = _.cloneDeep(obj); 通用方法可以将方法一和方法二整合成一个深拷贝的通用方法123456789101112131415var cloneObj = function(obj)&#123; var str, newobj = obj.constructor === Array ? [] : &#123;&#125;; if(typeof obj !== &apos;object&apos;)&#123; return; &#125; else if(window.JSON)&#123; str = JSON.stringify(obj), //系列化对象 newobj = JSON.parse(str); //还原 &#125; else &#123; for(var i in obj)&#123; newobj[i] = typeof obj[i] === &apos;object&apos; ? cloneObj(obj[i]) : obj[i]; //递归方法实现，对于IE7以及IE8的兼容模式window未内置JSON对象 &#125; &#125; return newobj;&#125;;","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]}]